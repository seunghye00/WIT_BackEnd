<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="attendance">

	<!-- 출근 기록을 삽입 -->
	<insert id="startAtd">
		INSERT INTO Attendance (atd_seq, work_date,
		start_time, start_status,
		emp_no)
		VALUES (atd_seq.NEXTVAL, #{work_date},
		#{start_time}, #{start_status},
		#{emp_no})
	</insert>

	<!-- 퇴근 기록을 업데이트 -->
	<update id="endAtd">
		UPDATE Attendance
		SET end_time = #{end_time},
		work_hours = #{work_hours}, end_status =
		#{end_status}
		WHERE atd_seq =
		#{atd_seq}
	</update>

	<!-- 특정 직원의 특정 날짜 출근 기록을 조회 -->
	<!-- 출근 및 퇴근 시간 조회(메인 페이지) -->
	<select id="selectAtd" resultType="com.wit.dto.AttendanceDTO">
		SELECT * FROM Attendance WHERE
		emp_no = #{emp_no, jdbcType=VARCHAR} AND
		work_date = #{work_date}
	</select>

	<!-- 월간 근태현황 조회 -->
	<select id="monthlyStatus" resultType="java.util.HashMap">
		WITH date_range AS (
		SELECT
		TRUNC(SYSDATE, 'MM') AS start_date,
		LAST_DAY(SYSDATE) AS end_date
		FROM dual
		)
		SELECT
		SUM(CASE WHEN start_status = '지각' THEN 1 ELSE 0 END)
		AS late,
		SUM(CASE WHEN end_status = '조퇴' THEN 1 ELSE 0 END) AS
		earlyLeave,
		SUM(CASE WHEN start_status = '결근' OR end_status = '결근' THEN
		1 ELSE 0 END) AS
		absence
		FROM
		Attendance
		WHERE
		emp_no = #{emp_no}
		AND
		work_date BETWEEN (SELECT start_date FROM date_range) AND (SELECT
		end_date FROM
		date_range)
	</select>

	<!-- 월간 근무시간 조회 -->
	<!-- &gt = > -->
	<!-- &lt = < -->
	<select id="monthlyWorkHours" resultType="java.util.HashMap">
		WITH date_range AS (
		SELECT
		TRUNC(SYSDATE, 'MM') AS start_date,
		LAST_DAY(SYSDATE) AS end_date
		FROM dual
		)
		SELECT
		COUNT(CASE WHEN start_time != '00:00' OR end_time !=
		'00:00' THEN work_date END)
		AS workingDays,
		SUM(
		CASE
		WHEN
		TO_DATE(end_time, 'HH24:MI') &gt; TO_DATE('12:00', 'HH24:MI')
		AND
		TO_DATE(start_time, 'HH24:MI') &lt; TO_DATE('13:00', 'HH24:MI') THEN
		(TO_DATE(end_time, 'HH24:MI') - TO_DATE(start_time, 'HH24:MI')) * 24 -
		1
		ELSE
		(TO_DATE(end_time, 'HH24:MI') - TO_DATE(start_time, 'HH24:MI')) *
		24
		END
		) AS totalWorkingHours
		FROM
		Attendance
		WHERE
		emp_no = #{emp_no}
		AND
		work_date BETWEEN (SELECT start_date FROM date_range) AND (SELECT
		end_date FROM
		date_range)
	</select>

	<!-- 주간 근무현황 조회 -->
	<select id="weeklyStatus" resultType="java.util.HashMap">
		WITH date_range AS (
		SELECT
		TRUNC(SYSDATE, 'IW') AS start_date,
		TRUNC(SYSDATE, 'IW') + 6 AS
		end_date
		FROM dual
		)
		SELECT
		work_date,
		start_time,
		end_time,
		work_hours
		FROM
		Attendance
		WHERE
		emp_no = #{emp_no}
		AND work_date BETWEEN (SELECT
		start_date FROM date_range) AND (SELECT
		end_date FROM date_range)
		ORDER
		BY work_date
	</select>

	<!-- 월간 레코드 수 조회 -->
	<select id="monthlyRecordCount" resultType="int">
		SELECT COUNT(*)
		FROM
		Attendance
		WHERE emp_no = #{empNo} AND TO_CHAR(work_date, 'YYYY-MM') =
		#{month}
	</select>

	<!-- 월간 근무현황 조회 (페이징 적용) -->
	<select id="monthlyWorkStatus" resultType="java.util.HashMap">
		SELECT work_date,
		start_time, end_time, work_hours
		FROM (
		SELECT ROW_NUMBER() OVER (ORDER
		BY work_date ASC) AS rn, work_date,
		start_time, end_time, work_hours
		FROM Attendance
		WHERE emp_no = #{empNo} AND TO_CHAR(work_date,
		'YYYY-MM') = #{month}
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<!-- 결근 -->
	<!-- 전날에 출근한 기록이 없을 경우, 전날을 결근으로 DB에 등록 -->
	<update id="markAbsence">
		INSERT INTO Attendance (atd_seq, work_date,
		start_time, end_time,
		work_hours, start_status, end_status, emp_no)
		SELECT atd_seq.NEXTVAL, #{work_date}, '00:00', '00:00', '0H', '결근',
		'결근',
		#{emp_no}
		FROM dual
		WHERE NOT EXISTS (
		SELECT 1
		FROM Attendance
		WHERE
		emp_no = #{emp_no}
		AND work_date = #{work_date}
		)
	</update>

	<!-- 직원 정보 조회 -->
	<select id="employeeInfo" resultType="com.wit.dto.EmployeeDTO">
		SELECT e.name, r.role_title
		as role_code
		FROM Employee e
		JOIN Role r ON e.role_code = r.role_code
		WHERE e.emp_no = #{emp_no}
	</select>

	<!-- 부서의 총 직원 수를 가져옴 -->
	<select id="getDeptEmployeeCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM employee e
		JOIN dept d ON e.dept_code = d.dept_code
		WHERE d.dept_title = #{deptTitle}
	</select>

	<!-- 부서별 근태현황 (관리자) 페이징 적용 -->
	<select id="deptAtd" parameterType="map" resultType="map">
		SELECT *
		FROM (
		SELECT ROWNUM rn, data.*
		FROM (
		SELECT
		e.name AS empname,
		r.role_title AS roletitle,
		MAX(CASE WHEN TO_CHAR(a.work_date, 'D') =
		'2' THEN a.start_time || ' - ' ||
		a.end_time ELSE '' END) AS monday,
		MAX(CASE WHEN TO_CHAR(a.work_date, 'D') = '3' THEN a.start_time || ' -
		' ||
		a.end_time ELSE '' END) AS tuesday,
		MAX(CASE WHEN
		TO_CHAR(a.work_date, 'D') = '4' THEN a.start_time || ' - ' ||
		a.end_time ELSE '' END) AS wednesday,
		MAX(CASE WHEN
		TO_CHAR(a.work_date, 'D') = '5' THEN a.start_time || ' - ' ||
		a.end_time ELSE '' END) AS thursday,
		MAX(CASE WHEN TO_CHAR(a.work_date,
		'D') = '6' THEN a.start_time || ' - ' ||
		a.end_time ELSE '' END) AS
		friday,
		MAX(CASE WHEN TO_CHAR(a.work_date, 'D') = '7' THEN a.start_time
		|| ' - ' ||
		a.end_time ELSE '' END) AS saturday
		FROM
		employee e
		JOIN dept
		d ON e.dept_code = d.dept_code
		JOIN role r ON e.role_code = r.role_code
		LEFT JOIN attendance a ON e.emp_no = a.emp_no AND a.work_date BETWEEN
		#{startDate} AND #{endDate}
		WHERE
		d.dept_title = #{deptTitle}
		GROUP BY
		e.name, r.role_title
		ORDER BY
		CASE
		WHEN r.role_title = '사장' THEN 1
		WHEN
		r.role_title = '부장' THEN 2
		WHEN r.role_title = '차장' THEN 3
		WHEN
		r.role_title = '과장' THEN 4
		WHEN r.role_title = '대리' THEN 5
		WHEN
		r.role_title = '사원' THEN 6
		WHEN r.role_title = '인턴' THEN 7
		ELSE 8
		END
		ASC,
		e.name ASC
		) data
		WHERE ROWNUM &lt;= #{end}
		)
		WHERE rn &gt;= #{start}
	</select>

	<!-- 부서 조회 -->
	<select id="AllDepts" resultType="com.wit.dto.DeptDTO">
		SELECT dept_code, dept_title
		FROM dept
	</select>

</mapper>
